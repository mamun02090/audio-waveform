const data = [10, 209, 208, 147, 124, 158, 111, 34, 86, 225, 284, 119, 106, 82, 185, 153, 212, 166, 241, 118, 268, 150, 180, 143, 37, 181, 167, 219, 184, 381, 243, 98, 112, 178, 158, 139, 135, 157, 121, 90, 66, 220, 177, 116, 95, 158, 272, 207, 186, 221, 124, 89, 114, 182, 165, 187, 174, 181, 209, 100, 190, 288, 93, 178, 156, 225, 296, 137, 219, 193, 172, 92, 91, 162, 195, 107, 114, 97, 114, 61, 168, 87, 153, 201, 55, 120, 127, 115, 192, 131, 61, 96, 167, 159, 166, 130, 179, 200, 143, 146, 196, 107, 184, 127, 281, 162, 194, 91, 117, 128, 105, 157, 193, 153, 70, 117, 140, 95, 135, 72, 108, 133, 51, 209, 197, 74, 113, 63, 109, 105, 93, 171, 108, 156, 156, 86, 118, 238, 178, 123, 242, 201, 94, 132, 219, 276, 108, 149, 58, 180, 188, 185, 152, 133, 159, 179, 135, 155, 90, 206, 137, 111, 150, 128, 83, 87, 99, 50, 114, 173, 107, 85, 230, 117, 57, 122, 176, 221, 161, 185, 158, 140, 161, 145, 85, 118, 175, 44, 136, 164, 88, 115, 165, 166, 139, 148, 98, 70, 153, 84, 77, 97, 117, 71, 130, 165, 71, 136, 214, 96, 124, 187, 123, 146, 186, 118, 87, 180, 135, 109, 147, 115, 46, 122, 154, 78, 115, 167, 124, 138, 148, 66, 101, 106, 119, 47, 151, 193, 63, 97, 165, 253, 132, 179, 293, 173, 191, 144, 172, 202, 88, 43, 167, 123, 68, 104, 105, 139, 117, 161, 87, 150, 164, 113, 132, 140, 135, 69, 112, 120, 91, 301, 235, 160, 174, 347, 245, 436, 199, 252, 146, 280, 422, 105, 224, 481, 137, 335, 423, 154, 219, 497, 162, 265, 603, 181, 168, 596, 223, 334, 582, 290, 407, 601, 331, 375, 472, 314, 562, 391, 269, 424, 404, 396, 585, 394, 304, 536, 317, 256, 267, 226, 241, 168, 125, 218, 134, 170, 75, 135, 245, 126, 241, 253, 160, 211, 291, 146, 87, 227, 186, 114, 156, 98, 110, 225, 138, 70, 177, 271, 126, 148, 223, 292, 102, 153, 166, 133, 241, 121, 68, 160, 185, 156, 167, 149, 92, 192, 134, 260, 182, 285, 144, 213, 255, 213, 245, 208, 164, 178, 246, 244, 148, 154, 256, 144, 76, 274, 215, 69, 153, 167, 91, 195, 248, 95, 124, 207, 127, 102, 120, 111, 66, 158, 182, 76, 96, 137, 163, 139, 200, 159, 198, 259, 181, 105, 272, 155, 170, 311, 222, 218, 490, 289, 238, 476, 554, 458, 711, 722, 469, 1018, 709, 526, 838, 821, 608, 1054, 654, 964, 1003, 661, 1090, 681, 658, 1178, 749, 993, 991, 684, 1032, 744, 785, 836, 819, 1220, 845, 763, 848, 804, 852, 746, 761, 958, 520, 820, 707, 649, 1026, 537, 757, 687, 580, 878, 479, 722, 630, 493, 863, 370, 650, 759, 428, 780, 576, 516, 750, 430, 686, 521, 453, 789, 510, 700, 504, 615, 600, 565, 779, 369, 730, 674, 712, 776, 547, 700, 581, 652, 473, 435, 523, 324, 556, 328, 497, 503, 293, 465, 308, 544, 601, 277, 436, 608, 510, 549, 263, 484, 672, 408, 519, 417, 869, 725, 443, 352, 809, 426, 598, 547, 424, 396, 470, 592, 332, 224, 237, 350, 374, 229, 142, 205, 237, 366, 245, 193, 203, 116, 457, 293, 216, 198, 296, 296, 291, 250, 125, 107, 204, 123, 171, 154, 204, 150, 217, 186, 88, 169, 235, 134, 125, 164, 99, 70, 148, 175, 77, 137, 77, 148, 225, 87, 65, 107, 178, 130, 167, 197, 127, 218, 101, 118, 116, 142, 121, 126, 153, 139, 117, 141, 90, 98, 191, 117, 121, 169, 97, 159, 142, 146, 68, 129, 230, 191, 160, 196, 134, 232, 129, 165, 176, 200, 168, 236, 191, 219, 235, 268, 390, 316, 247, 499, 282, 464, 560, 276, 413, 675, 324, 431, 725, 280, 612, 607, 200, 392, 556, 305, 438, 516, 272, 515, 522, 290, 642, 600, 279, 697, 546, 377, 859, 526, 305, 870, 542, 306, 784, 583, 403, 754, 502, 309, 705, 667, 255, 556, 711, 271, 415, 673, 287, 497, 657, 355, 338, 606, 381, 359, 463, 238, 457, 451, 164, 274, 272, 115, 161, 199, 186, 472, 122, 276, 357, 209, 386, 310, 164, 265, 261, 166, 289, 358, 502, 436, 272, 280, 394, 387, 309, 238, 270, 472, 333, 306, 354, 279, 504, 298, 341, 396, 255, 395, 373, 231, 297, 273, 127, 405, 242, 209, 236, 228, 168, 322, 292, 234, 342, 576, 262, 326, 203, 243, 288, 221, 156, 349, 205, 288, 418, 200, 159, 602, 107, 401, 392, 329, 431, 405, 330, 410, 559, 267, 623, 320, 387, 571, 387, 602, 503, 470, 583, 397, 381, 702, 197, 536, 383, 310, 406, 388, 355, 668, 251, 610, 347, 294, 564, 354, 329, 294, 289, 469, 272, 381, 266, 414, 302, 244, 334, 294, 382, 351, 370, 387, 322, 298, 506, 387, 273, 410, 458, 306, 308, 212, 337, 182, 250, 182, 295, 258, 202, 151, 194, 121, 384, 181, 155, 368, 196, 465, 137, 63, 191, 92, 107, 126, 108, 225, 232, 109, 319, 230, 113, 93, 88, 68, 71, 75, 132, 82, 158, 128, 90, 144, 132, 159, 156, 78, 121, 168, 394, 190, 234, 176, 131, 154, 98, 111, 90, 287, 137, 60, 102, 298, 202, 117, 198, 160, 86, 230, 114, 140, 147, 150, 156, 202, 166, 100, 117, 189, 78, 143, 105, 123, 232, 72, 132, 217, 183, 127, 432, 306, 599, 390, 424, 545, 608, 506, 399, 584, 306, 409, 677, 385, 649, 647, 445, 593, 584, 341, 702, 367, 447, 573, 334, 567, 711, 477, 666, 664, 668, 1046, 698, 1235, 741, 858, 1083, 789, 819, 796, 767, 712, 629, 766, 844, 461, 827, 685, 465, 660, 644, 599, 547, 600, 707, 599, 493, 680, 595, 544, 600, 637, 532, 463, 539, 621, 243, 635, 438, 398, 339, 383, 468, 343, 480, 295, 502, 254, 287, 490, 515, 430, 577, 467, 633, 465, 233, 705, 463, 448, 411, 345, 498, 421, 333, 533, 629, 272, 515, 471, 474, 455, 252, 369, 382, 306, 332, 559, 151, 419, 283, 407, 333, 257, 201, 215, 129, 240, 309, 237, 207, 336, 306, 249, 209, 284, 252, 254, 344, 185, 240, 424, 317, 236, 259, 303, 224, 332, 308, 181, 270, 408, 311, 234, 307, 160, 109, 262, 260, 268, 159, 191, 313, 220, 217, 232, 236, 206, 126, 142, 161, 209, 253, 275, 258, 273, 227, 328, 169, 142, 129, 239, 131, 139, 127, 152, 322, 304, 257, 188, 240, 199, 135, 122, 137, 169, 219, 219, 356, 286, 259, 238, 152, 193, 84, 141, 207, 155, 258, 346, 239, 223, 221, 216, 169, 231, 116, 104, 127, 303, 268, 231, 306, 410, 254, 168, 214, 293, 214, 179, 196, 333, 215, 176, 272, 283, 194, 292, 260, 145, 332, 140, 215, 180, 446, 218, 135, 120, 242, 209, 233, 144, 151, 263, 197, 250, 171, 291, 291, 193, 178, 287, 196, 227, 249, 270, 214, 178, 194, 325, 252, 270, 303, 265, 351, 324, 248, 421, 438, 385, 397, 396, 409, 336, 370, 435, 309, 408, 291, 252, 441, 282, 444, 417, 377, 392, 346, 369, 441, 346, 537, 378, 368, 502, 400, 265, 578, 433, 539, 380, 330, 580, 488, 465, 479, 542, 540, 433, 279, 537, 449, 406, 477, 412, 487, 453, 166, 289, 553, 331, 364, 509, 409, 529, 344, 328, 394, 714, 247, 245, 714, 251, 720, 536, 295, 781, 596, 335, 536, 584, 557, 535, 487, 518, 486, 578, 389, 382, 580, 405, 300, 558, 524, 405, 448, 388, 462, 175, 610, 282, 461, 460, 424, 308, 544, 455, 308, 521, 653, 324, 330, 808, 323, 735, 349, 279, 541, 689, 443, 406, 541, 473, 269, 492, 425, 304, 577, 407, 432, 488, 770, 450, 571, 435, 531, 473, 423, 575, 412, 630, 458, 558, 495, 379, 620, 587, 502, 600, 709, 363, 518, 749, 334, 531, 490, 559, 476, 654, 492, 639, 448, 430, 634, 596, 446, 531, 601, 297, 712, 459, 383, 630, 385, 537, 590, 367, 356, 444, 429, 308, 571, 521, 727, 520, 557, 691, 463, 410, 569, 351, 327, 530, 336, 532, 259, 328, 407, 501, 306, 566, 352, 358, 531, 281, 341, 426, 342, 429, 330, 330, 459, 465, 406, 369, 322, 437, 452, 433, 422, 356, 324, 432, 438, 542, 339, 424, 505, 318, 561, 411, 386, 299, 320, 270, 407, 293, 325, 381, 325, 414, 278, 341, 301, 328, 459, 351, 342, 488, 267, 384, 396, 355, 360, 399, 280, 457, 299, 440, 247, 278, 524, 341, 352, 383, 232, 621, 430, 318, 573, 280, 475, 433, 295, 356, 385, 413, 419, 445, 610, 370, 384, 542, 289, 443, 456, 461, 800, 386, 428, 483, 461, 463, 325, 286, 483, 408, 716, 272, 284, 549, 424, 275, 585, 469, 421, 346, 469, 323, 466, 503, 911, 324, 458, 894, 384, 440, 525, 546, 345, 389, 568, 493, 543, 478, 646, 844, 492, 688, 896, 805, 915, 872, 1004, 740, 1026, 930, 884, 753, 1109, 902, 725, 658, 798, 879, 540, 561, 557, 507, 673, 582, 635, 665, 438, 586, 440, 696, 589, 577, 440, 416, 550, 557, 359, 488, 433, 331, 397, 462, 352, 413, 448, 374, 351, 338, 510, 297, 541, 416, 419, 351, 391, 446, 279, 514, 642, 364, 333, 687, 335, 295, 361, 317, 252, 365, 279, 318, 281, 395, 201, 373, 257, 443, 261, 425, 474, 391, 269, 269, 333, 220, 427, 361, 430, 323, 250, 275, 597, 298, 301, 384, 161, 479, 457, 310, 260, 369, 363, 325, 169, 187, 349, 112, 611, 217, 388, 373, 336, 393, 252, 247, 92, 180, 151, 161, 212, 291, 116, 270, 107, 192, 143, 151, 250, 220, 283, 256, 144, 362, 130, 221, 136, 250, 191, 101, 193, 97, 235, 175, 119, 131, 174, 271, 299, 186, 117, 204, 144, 191, 165, 78, 223, 166, 180, 110, 165, 125, 135, 228, 176, 111, 222, 107, 114, 329, 237, 192, 406, 194, 199, 96, 157, 132, 173, 138, 133, 162, 183, 170, 189, 95, 167, 98, 208, 210, 255, 150, 165, 122, 304, 229, 232, 176, 86, 147, 232, 155, 210, 251, 182, 154, 163, 162, 131, 113, 228, 82, 123, 274, 302, 177, 178, 185, 100, 197, 188, 121, 166, 227, 69, 187, 124, 101, 141, 108, 272, 323, 150, 249, 160, 145, 143, 115, 118, 317, 107, 114, 97, 144, 69, 245, 68, 152, 226, 82, 76, 209, 49, 163, 188, 175, 94, 134, 120, 118, 124, 124, 100, 239, 183, 167, 117, 121, 106, 162, 105, 140, 125, 58, 176, 102, 92, 89, 162, 73, 219, 99, 100, 155, 287, 117, 67, 110, 91, 153, 82, 127, 205, 90, 139, 94, 142, 203, 135, 210, 79, 73, 91, 216, 197, 234, 156, 130, 133, 90, 104, 76, 298, 65, 263, 122, 75, 123, 120, 143, 106, 193, 74, 117, 79, 158, 98, 154, 130, 207, 219, 209, 158, 224, 144, 258, 181, 64, 82, 128, 114, 137, 158, 80, 132, 292, 49, 108, 81, 143, 169, 230, 187, 142, 106, 184, 167, 156, 95, 66, 120, 194, 142, 140, 111, 283, 188, 133, 69, 103, 147, 265, 80, 110, 92, 147, 135, 182, 106, 79, 220, 247, 115, 159, 108, 127, 317, 177, 61, 49, 110, 166, 181, 147, 116, 164, 348, 127, 81, 133, 115, 145, 182, 177, 89, 76, 204, 188, 222, 112, 238, 358, 147, 137, 84, 93, 165, 267, 88, 128, 117, 138, 299, 236, 180, 109, 160, 276, 134, 134, 105, 178, 124, 154, 173, 79, 116, 134, 272, 93, 85, 281, 213, 258, 156, 144, 169, 362, 234, 157, 103, 73, 190, 195, 153, 177, 162, 182, 174, 190, 105, 173, 193, 245, 153, 144, 101, 208, 392, 106, 77, 227, 199, 136, 141, 98, 150, 96, 248, 198, 101, 125, 137, 262, 270, 61, 99, 173, 242, 293, 150, 53, 199, 285, 58, 58, 98, 207, 279, 100, 152, 53, 129, 266, 216, 184, 226, 162, 322, 338, 250, 146, 105, 272, 231, 80, 82, 63, 112, 203, 129, 179, 289, 147, 137, 116, 185, 99, 276, 335, 138, 152, 211, 237, 132, 227, 124, 80, 132, 142, 122, 318, 197, 165, 269, 273, 142, 131, 201, 368, 240, 160, 96, 138, 145, 48, 261, 208, 119, 219, 168, 150, 163, 139, 232, 276, 211, 120, 95, 275, 260, 203, 70, 90, 272, 186, 118, 146, 84, 118, 220, 145, 69, 91, 93, 180, 165, 92, 87, 101, 201, 184, 254, 155, 211, 222, 285, 157, 85, 44, 230, 201, 134, 166, 109, 135, 235, 110, 121, 113, 331, 200, 220, 123, 101, 117, 169, 194, 108, 135, 141, 94, 194, 117, 117, 143, 206, 158, 117, 185, 234, 255, 144, 228, 102, 86, 158, 143, 138, 131, 103, 217, 138, 219, 132, 187, 216, 258, 72, 32, 125, 252, 131, 205, 56, 97, 123, 275, 91, 48, 102, 53, 6, 3, 3, 3]

let canvas2 = document.getElementById('canvas2');
let canvas2Ctx = canvas2.getContext('2d');
canvas2Ctx.clearRect(0, 0, canvas2.offsetWidth, canvas2.height);
const dpr2 = window.devicePixelRatio || 1;
const padding2 = 10;
const canvas2Width = canvas2.offsetWidth;
const canvas2Height = canvas2.offsetHeight;

canvas2.width = canvas2Width * dpr2;
canvas2.height = (canvas2Height + padding2 * 2) * dpr2;
canvas2Ctx.scale(dpr2, dpr2);
// let bufferLength, dataArray;
// let isRecording = false;
let xPos2 = 0; // Starting x position for draw2ing the waveform
const silenceThreshold2 = 0.02; // Threshold to ignore small background noise
const canVas2Width = canvas2.offsetWidth || 500
const intervalTime2 = 10;
const time2Input = document.getElementById('time')
const time2r = document.getElementById('timer')
time2Input.value = 2.04;
let time2 = time2Input.value;
let widthContain2 = 0
let intervalId2


const audioPlayer = document.getElementById('original-audio')

const originalAudioBtn = document.getElementById('originalAudio')

originalAudioBtn.addEventListener('click', () => {
    setupCanvas2()
    widthContain2 = 0
    let jsondata = [...data]
    clearInterval(intervalId2)
    let count = 0;
   intervalId2 = setInterval(() => {
    if (widthContain2 < canvas.offsetWidth-0.1) {
        const normalizedData = normalizeData2(jsondata.splice(0,9)); // Normalize the current chunko
        // const normalizedData = normalizeData2([jsondata[count]]); // Normalize the current chunko
        // console.log(data.toSpliced(count, count + 99));
        draw2(normalizedData);
        console.log(count);
        count++;
    } else {
        widthContain2= 0
        clearInterval(intervalId2)
    }
       
}, intervalTime2);
    audioPlayer.play()
})


const samples2 = 10;

console.log(data.length)

// // equation to calculate the widthPerSample to match the time2
let widthSamplingRate2 = (intervalTime2 * canVas2Width) / (samples2 * time2 * 1000)

console.log(widthSamplingRate2);

// intervalId = setInterval(() => {
//     if (widthContain2 < canvas2.offsetWidth) {

//         const normalizedData = normalizeData2(data); // Normalize the current chunk
//         draw2(normalizedData);
//     } else {
//         isRecording = false;
//         isTalk = false;
//         widthContain2 = 0
//         // clearInterval(recordingTime2rId)
//         clearInterval(intervalId)
//         // nTime2 = Date.now();
//         // time2r.innerHTML = nTime2 - cTime2
//     }
// }, intervalTime2);
// Set up the canvas2
function setupCanvas2() {
    canvas2 = document.getElementById('canvas2');
    canvas2Ctx = canvas2.getContext('2d');
    canvas2Ctx.clearRect(0, 0, canvas2.offsetWidth, canvas2.height);
    const dpr2 = window.devicePixelRatio || 1;
    const padding2 = 10;
    const canvas2Width = canvas2.offsetWidth;
    const canvas2Height = canvas2.offsetHeight;

    canvas2.width = canvas2Width * dpr2;
    canvas2.height = (canvas2Height + padding2 * 2) * dpr2;
    canvas2Ctx.scale(dpr2, dpr2);
    xPos2 = 0; // Reset x position when starting a new recording
}




const maxAmplitude = Math.max(...data);

// Normalize the filtered data, but avoid normalizing to very low amplitudes
const normalizeData2 = (filteredData) => {
    // if (!isRecording) {
    //     filteredData = filteredData.map(item => { return item = (item / 90) < silenceThreshold2 ? 0 : (item / 90); }
    //     )
    // }
    
    if (maxAmplitude === 0) return filteredData; // If everything is 0, don't normalize

    const multiplier = 1 / maxAmplitude;
    return filteredData.map(n => n * multiplier);
};

// Draw2 the waveform on the canvas2 using draw2LineSegment2 style
const draw2 = (normalizedData) => {
    const canvas2Width = canvas2.offsetWidth;
    const canvas2Height = canvas2.height;
    const widthSample = (canvas2Width) / data.length; 



    // Don't clear the canvas2 so previous data remains
    // Draw2 each sample segment like before
    for (let i = 0; i < normalizedData.length; i++) {
        if (widthContain2 >= canvas2Width) {
            widthContain2 =500
            
            return; // Stop if the canvas2 width is reached
        }

        
            const x = xPos2;
        let height = normalizedData[i] * canvas2Height * 0.5; // Scale to half the canvas2 height
        console.log(height, normalizedData[i]);

            // Use the same draw2LineSegment2 approach for the spikes
            draw2LineSegment2(canvas2Ctx, x, height, widthSample, (i + 1) % 2);
            draw2LineSegment2(canvas2Ctx, x, height, widthSample);

            xPos2 += widthSamplingRate2; // Move to the next x position

        
        widthContain2 += widthSample
        

    }
};

// Function to draw2 a line segment in the waveform (spike-like visualization) with Y-axis centered
let isEven = false
const draw2LineSegment2 = (ctx, x, y, width) => {
    ctx.lineWidth = 1; // how thick the line is
    ctx.strokeStyle = "blue"; // what color our line is
    ctx.fillStyle = "blue"
    ctx.beginPath();


    // Draw2 the line segment with Y-axis centered
    const centerY = canvas2.height / 2; // Middle of the canvas2 height
    y = isEven ? y : -y; // Invert every second segment for the spike effect

    ctx.moveTo(x, centerY); // Start at the center (Y = 0)
    if (y < 7 && y > -7) {
        // Otherwise, draw2 the regular spike
        ctx.lineTo(x + width, centerY);
        ctx.stroke()
    } else {
        ctx.lineTo(x, centerY - y); // Draw2 a line up or down from the center
        ctx.lineTo(x + width, centerY); // End at the center again 
        ctx.fill();
    }
    // ctx.lineTo(x, x + width)
    // ctx.stroke();
    isEven= !isEven
   
};
draw2(normalizeData2(data))